name: Build and Release

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master ]

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
        include:
          - os: macos-latest
            platform: mac
          - os: ubuntu-latest
            platform: linux
          - os: windows-latest
            platform: win

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Run tests
        run: npm test

      - name: Build CSS
        run: npm run build:css

      - name: Build Electron app
        run: npm run build:${{ matrix.platform }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_ENV: production

      - name: Build Linux ARM app
        if: matrix.platform == 'linux'
        run: npm run build:linux-arm
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_ENV: production

      - name: Setup Node.js 22 for CLI builds
        if: matrix.platform != 'win'
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Build CLI app (macOS/Linux only)
        if: matrix.platform != 'win'
        run: npm run build:cli:${{ matrix.platform }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build CLI Linux ARM app
        if: matrix.platform == 'linux'
        run: npm run build:cli:linux-arm
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Mock CLI app (macOS/Linux only)
        if: matrix.platform != 'win'
        run: npm run build:mock:${{ matrix.platform }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Mock CLI Linux ARM app
        if: matrix.platform == 'linux'
        run: npm run build:mock:linux-arm
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: List CLI files
        if: matrix.platform != 'win'
        run: ls -la build/cli/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-builds
          path: |
            build/*.dmg
            build/*.exe
            build/*.AppImage
            ${{ matrix.platform != 'win' && 'build/cli/' || '' }}
          retention-days: 1

  create-release:
    needs: [ build ]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Get version from package.json
        id: get_version
        run: echo "VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Update README with current version
        run: npm run update:readme

      - name: Verify README version
        run: npm run verify:readme

      - name: Determine version bump type
        id: version_bump_type
        run: |
          # Check commit message for version bump indicators
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          
          if [[ "$COMMIT_MSG" =~ \[major\] ]]; then
            echo "BUMP_TYPE=major" >> $GITHUB_OUTPUT
          elif [[ "$COMMIT_MSG" =~ \[minor\] ]]; then
            echo "BUMP_TYPE=minor" >> $GITHUB_OUTPUT
          elif [[ "$COMMIT_MSG" =~ \[patch\] ]]; then
            echo "BUMP_TYPE=patch" >> $GITHUB_OUTPUT
          elif [[ "$COMMIT_MSG" =~ ^feat: ]]; then
            echo "BUMP_TYPE=minor" >> $GITHUB_OUTPUT
          else
            echo "BUMP_TYPE=patch" >> $GITHUB_OUTPUT
          fi
          echo "Version bump type: ${{ steps.version_bump_type.outputs.BUMP_TYPE }}"

      - name: Generate release name
        id: release_name
        run: |
          VERSION="${{ steps.get_version.outputs.VERSION }}"
          echo "RELEASE_NAME=v$VERSION" >> $GITHUB_OUTPUT

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.release_name.outputs.RELEASE_NAME }}
          name: Release ${{ steps.release_name.outputs.RELEASE_NAME }}
          generate_release_notes: true
          body: |
            ## 📦 Build
            
            ### 🖥️ GUI Applications
            - **Windows**: Portable executable (x64)
            - **macOS**: DMG installer (ARM64)
            - **Linux**: AppImage (x64 + ARM64)
            
            ### 💻 CLI Applications
            - **macOS**: Native CLI executables (x64)
            - **Linux**: Native CLI executables (x64 + ARM64)
            - **Mock Mode**: Test CLI versions available
            
            ### 🔧 Features
            - Automated voting on GuruShots challenges
            - Boost management and application
            - Dual interface: GUI and command-line
            - Secure authentication with remember me
            - Theme support (light/dark mode)
            - Cross-platform compatibility
            
            ### 🔗 Build Info
            - Commit: ${{ github.sha }}
            - Branch: ${{ github.ref_name }}
            - Version: ${{ steps.get_version.outputs.VERSION }}
            - Version Bump Type: ${{ steps.version_bump_type.outputs.BUMP_TYPE }}
          draft: false
          prerelease: false
          files: |
            artifacts/mac-builds/GuruShotsAutoVote-v*.dmg
            artifacts/linux-builds/GuruShotsAutoVote-v*.AppImage
            artifacts/win-builds/GuruShotsAutoVote-v*.exe
            artifacts/mac-builds/cli/gurucli-mac
            artifacts/mac-builds/cli/gurumockcli-mac
            artifacts/linux-builds/cli/gurucli-linux
            artifacts/linux-builds/cli/gurucli-linux-arm
            artifacts/linux-builds/cli/gurumockcli-linux
            artifacts/linux-builds/cli/gurumockcli-linux-arm
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Bump version
        run: |
          # Bump version based on determined type
          BUMP_TYPE="${{ steps.version_bump_type.outputs.BUMP_TYPE }}"
          echo "Bumping $BUMP_TYPE version..."
          npm version $BUMP_TYPE --no-git-tag-version
          
          # Get new version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Commit and push version bump
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json README.md docs/
          git commit -m "Bump version to $NEW_VERSION (${{ steps.version_bump_type.outputs.BUMP_TYPE }}) and update documentation [skip ci]"
          git push origin master 